name: Claude PR Review

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  pr-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch PR diff
        id: get_diff
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }}

          echo "Fetching PR diff for PR #$PR_NUMBER in $REPO..."

          # Directly fetch PR diff
          curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
               -H "Accept: application/vnd.github.v3.diff" \
               "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER" > pr.diff

          if [ ! -s pr.diff ]; then
            echo "::error::Failed to fetch PR diff"
            exit 1
          fi

          echo "PR diff size: $(wc -c < pr.diff) bytes"

      - name: Prepare Claude request
        id: prepare_request
        run: |
          # Read PR diff
          DIFF_CONTENT=$(cat pr.diff)
          
          # Limit diff size
          MAX_DIFF_SIZE=50000
          if [ ${#DIFF_CONTENT} -gt $MAX_DIFF_SIZE ]; then
            echo "Truncating diff from ${#DIFF_CONTENT} to $MAX_DIFF_SIZE chars"
            DIFF_CONTENT="${DIFF_CONTENT:0:$MAX_DIFF_SIZE}"
          fi
          
          # Save diff content to file
          echo "$DIFF_CONTENT" > diff_content.txt
          echo "Diff saved to diff_content.txt ($(wc -c < diff_content.txt) bytes)"
          
          # Create user prompt file, avoiding shell parsing issues
          # 强调 JSON 格式和 `context_code` 的正确性，并提供示例
          cat > user_prompt.txt << 'EOT'
            这是一个 GitHub Pull Request 的代码差异。请对它进行全面审查，并以 **JSON 格式**提供详细、可操作的反馈。你的响应应包含以下顶级键：
            
            1.  `summary` (string): 本次 PR 的内容总结、目的和供其他评审人员关注的 1-2 个关键点。
            
            2.  `low_confidence_issues` (array of objects):
                * `file` (string): 相关的相对文件路径。
                * `line` (number, optional): 问题的起始行号（在修改后的文件中）。
                * `description` (string): 对问题的描述，解释你为什么怀疑它，指出潜在的风险或需要进一步人工确认的地方。
                * `context_code` (string, optional): 相关的代码片段，仅用 **Markdown 代码块**包裹 (例如 ```go 或 ```javascript)。**极其重要：此字段的字符串值内部的任何双引号 `"` 或反斜杠 `\` 都必须严格进行 JSON 转义 (`\"` 或 `\\`)，并且换行符必须使用 `\n` 来表示，以确保整个 JSON 字符串的有效性。例如，如果你的代码片段是：`String msg = "Hello World";\nSystem.out.println(msg);`，那么 `context_code` 的值应为：`"```java\\nString msg = \\\"Hello World\\\";\\nSystem.out.println(msg);\\n```"`**
            
            3.  `high_confidence_fixes` (array of objects):
                * `file` (string): 相关的相对文件路径。
                * `line` (number): 建议修改的起始行号。**此行号至关重要：它必须是你的建议所针对的代码在 PR **修改后文件** 中**实际被修改、添加或删除**的行的精确起始行号。**如果该行在 PR 差异中没有被标记为添加、删除或修改，GitHub 将无法在此处放置行内评论。**
                * `description` (string): 确认的问题的简洁描述。
                * `suggested_code` (string): 包含修复建议的 Markdown 代码块。**你必须严格使用 ```suggestion 格式**，例如：
                    ```suggestion
                    - // 这是原来的代码行，请务必包含在内
                    - // 这是如果修改涉及多行，原来的第二行
                    + // 这是建议修改后的新代码行，请务必包含在内
                    + // 这是如果修改涉及多行，建议添加的第二行
                    ```
                    **特别注意：**
                    * 如果建议是删除一行，则只包含 `-` 开头的该行。
                    * 如果建议是添加一行，则只包含 `+` 开头的该行。
                    * 如果建议是修改一行，则包含 `-` 开头的原始行和 `+` 开头的修改后的行。
                    * 如果建议修改多行，请确保 `suggested_code` 包含所有受影响的行，用 `-` 和 `+` 明确标记。
                    * 请确保此代码块内容准确无误，代表了该行（或多行）的完整修改，可以直接在 GitHub UI 中点击"Accept suggestion"来应用。
            
            4.  `other_suggestions` (string, optional): 其他非关键但有益的通用改进建议。
            
            请务必严格遵守 JSON 结构和 `suggested_code` 的 Markdown 格式。请避免在 `suggested_code` 中包含额外的换行符，除非它是代码的一部分。
            
            代码差异：
            ```diff
          EOT
          
          # Add diff content and end marker
          cat diff_content.txt >> user_prompt.txt
          echo -e "\n\`\`\`" >> user_prompt.txt
          
          echo "User prompt prepared successfully"
          
      - name: Call Claude API with Python
        id: call_claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          # 将 Python 脚本内容作为环境变量存储
          PYTHON_SCRIPT: |
            import json
            import os
            import requests
            import re
            from pathlib import Path

            # Read user prompt
            with open("user_prompt.txt", "r") as f:
                user_prompt = f.read()
                        
            # Build API request
            headers = {
                "x-api-key": os.environ["ANTHROPIC_API_KEY"],
                "anthropic-version": "2023-06-01",
                "content-type": "application/json"
            }
                        
            data = {
                "model": "claude-3-sonnet-20240229",
                "max_tokens": 20000, # 提高 max_tokens
                "temperature": 0.2,
                # 强调严格 JSON 格式和转义
                "system": "你是一位专业的 AI 代码评审员，专注于为 GitHub Pull Request 提供类似 GitHub Copilot 的高质量、可操作的审查。你的反馈应清晰、结构化，并以 **JSON 格式**严格提供。**务必使用 GitHub `suggestion` Markdown 格式**来提供代码修复建议。你的目标是识别潜在的错误、改进、最佳实践违规、性能瓶颈和安全问题。请确保你的 JSON 结果是完整的且可解析的。**所有 JSON 字符串值都必须经过正确的 JSON 转义，尤其是多行文本或包含特殊字符（如引号 `\"`、反斜杠 `\\`）的字符串。**",
                "messages": [
                    {
                        "role": "user",
                        "content": user_prompt
                    }
                ]
            }
                        
            # Send request
            print("Sending request to Claude API...")
            response = requests.post("https://api.anthropic.com/v1/messages", headers=headers, json=data)
                        
            # Check status code
            print(f"API response status code: {response.status_code}")
            if response.status_code != 200:
                print(f"Error response: {response.text}")
                exit(1)
                        
            # Save the entire response
            with open("claude_response.json", "w") as f:
                f.write(response.text)
                        
            # Extract and save content
            response_data = response.json()
            if "content" in response_data and len(response_data["content"]) > 0:
                review_text = response_data["content"][0]["text"]
                with open("claude_review.txt", "w") as f:
                    f.write(review_text)
                print(f"Review saved successfully ({len(review_text)} chars)")
            else:
                print("No content found in response")
                exit(1)
                        
            # Attempt to extract JSON more robustly
            # Look for the first '{' and the last '}' to define the JSON boundaries
            start_brace = review_text.find('{')
            end_brace = review_text.rfind('}')

            if start_brace != -1 and end_brace != -1 and end_brace > start_brace:
                json_text = review_text[start_brace : end_brace + 1]
                # Clean up potential trailing newlines/spaces outside JSON block
                json_text = json_text.strip()
            else:
                # Fallback to current regex if brace method fails, or assume whole text
                json_match = re.search(r"```json\s*(.+?)```", review_text, re.DOTALL)
                if json_match:
                    json_text = json_match.group(1).strip()
                else:
                    # If no JSON block is found, assume the entire content is JSON
                    json_text = review_text.strip()
                        
            try:
                # Validate JSON
                parsed_json = json.loads(json_text)
                with open("extracted_json.txt", "w") as f:
                    json.dump(parsed_json, f, indent=2)
                print("JSON extracted and validated successfully")
            except json.JSONDecodeError as e:
                print(f"Error parsing JSON: {e}")
                print("Raw content received (first 5000 chars):") 
                print(review_text[:5000]) # Print the full review_text that caused the error
                exit(1)
            except Exception as e:
                print(f"An unexpected error occurred: {e}")
                print("Raw content received (first 5000 chars):") # Also log for other errors
                print(review_text[:5000])
                exit(1)
        run: |
          # 将环境变量中的 Python 脚本内容写入文件
          echo "$PYTHON_SCRIPT" > claude_api_caller.py
          
          # 执行 Python 脚本
          python3 claude_api_caller.py
          
      - name: Post PR comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // 读取提取的JSON
            let reviewData;
            try {
              const jsonContent = fs.readFileSync('extracted_json.txt', 'utf8');
              reviewData = JSON.parse(jsonContent);
              console.log('Successfully loaded review data');
            } catch (error) {
              console.error('Error loading review data:', error);
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: '⚠️ **代码审查失败**\n\n无法加载审查结果。请查看工作流日志了解详情。'
              });
              return core.setFailed(`Failed to load review data: ${error.message}`);
            }
            
            const prNumber = context.payload.pull_request.number;
            const headSha = context.payload.pull_request.head.sha;
            
            // Create main comment
            let mainComment = `# Claude AI 代码审查\n\n`;
            
            // Add summary
            if (reviewData.summary) {
              mainComment += `## 1. PR 摘要\n\n${reviewData.summary}\n\n`;
            }
            
            // Add low-confidence issues
            if (reviewData.low_confidence_issues && reviewData.low_confidence_issues.length > 0) {
              mainComment += `## 2. 可能存在的问题\n\n`;
              for (const issue of reviewData.low_confidence_issues) {
                const location = issue.file ? ` (\`${issue.file}\`${issue.line ? ` 第 ${issue.line} 行` : ''})` : '';
                mainComment += `### ${issue.description}${location}\n\n`;
                if (issue.context_code) {
                  mainComment += `${issue.context_code}\n\n`;
                }
              }
            }
            
            // Note inline comment locations
            mainComment += `## 3. 代码修复建议\n\n`;
            if (reviewData.high_confidence_fixes && reviewData.high_confidence_fixes.length > 0) {
              mainComment += `已针对 ${reviewData.high_confidence_fixes.length} 处代码提出修复建议，请查看相关行的行内评论。\n\n`;
            } else {
              mainComment += `未发现需要立即修复的问题。\n\n`;
            }
            
            // Add other suggestions
            if (reviewData.other_suggestions) {
              mainComment += `## 4. 其他改进建议\n\n${reviewData.other_suggestions}\n\n`;
            }
            
            // Post main comment
            try {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: prNumber,
                body: mainComment
              });
              console.log('Posted main PR comment');
            } catch (error) {
              console.error('Failed to post main comment:', error);
              core.setFailed(`Failed to post main comment: ${error.message}`);
            }
            
            // Post inline comments
            if (reviewData.high_confidence_fixes && reviewData.high_confidence_fixes.length > 0) {
              console.log(`Processing ${reviewData.high_confidence_fixes.length} code fix suggestions...`);
              
              for (const fix of reviewData.high_confidence_fixes) {
                if (!fix.file || !fix.line || !fix.suggested_code) {
                  console.log(`Skipping invalid fix (missing required fields):`, fix);
                  continue;
                }
                
                try {
                  console.log(`Attempting to post review comment for ${fix.file} line ${fix.line}`);
                  // Ensure the line number is an integer
                  const lineNumber = parseInt(fix.line, 10);
                  if (isNaN(lineNumber)) {
                      console.error(`Invalid line number for ${fix.file}: ${fix.line}`);
                      // Fallback to a regular comment if line number is invalid
                      await github.rest.issues.createComment({
                          ...context.repo,
                          issue_number: prNumber,
                          body: `**注意：** 无法在 \`${fix.file}\` 第 ${fix.line} 行发布行内评论，因为行号无效。\n\n${fix.description}\n\n${fix.suggested_code}\n\n> 这通常是因为该行不在PR差异中或已被其他修改影响。`
                      });
                      continue;
                  }


                  await github.rest.pulls.createReviewComment({
                    ...context.repo,
                    pull_number: prNumber,
                    commit_id: headSha,
                    path: fix.file,
                    line: lineNumber,
                    side: 'RIGHT',
                    body: `${fix.description}\n\n${fix.suggested_code}`
                  });
                } catch (error) {
                  console.error(`Failed to post review comment for ${fix.file}:${fix.line}:`, error);
                  
                  // Post fallback comment
                  try {
                    await github.rest.issues.createComment({
                      ...context.repo,
                      issue_number: prNumber,
                      body: `**注意：** 无法在 \`${fix.file}\` 第 ${fix.line} 行发布行内评论。\n\n${fix.description}\n\n${fix.suggested_code}\n\n> 这通常是因为该行不在PR差异中或已被其他修改影响。`
                    });
                  } catch (fallbackError) {
                    console.error('Failed to post fallback comment:', fallbackError);
                  }
                }
              }
            }
