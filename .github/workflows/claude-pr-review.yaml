name: Claude PR Review

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  pr-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read # 允许读取仓库内容，包括文件和PR diff
      pull-requests: write # 修正：pull-requests 使用连字符而非下划线。允许读取 PR 元数据，并允许在 PR 上发表评论
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3

      - name: Fetch PR diff
        id: get_diff
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }}

          echo "Fetching PR diff for PR #$PR_NUMBER in $REPO..."

          set -eo pipefail

          # 1. 获取 diff_url
          DIFF_URL_JSON=$(curl -sS -f -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER")
          
          DIFF_URL=$(echo "$DIFF_URL_JSON" | jq -r .diff_url) # 修正这里：确保从 DIFF_URL_JSON 解析

          if [ -z "$DIFF_URL" ] || [ "$DIFF_URL" == "null" ]; then
            echo "ERROR: Failed to get diff_url or it was null. Review GitHub API response."
            exit 1
          fi

          # 2. 下载 diff 文件
          curl -L -f -H "Authorization: token $GH_TOKEN" "$DIFF_URL" > pr.diff

          # 3. 验证 pr.diff 文件内容
          if [ ! -s pr.diff ]; then
            echo "ERROR: pr.diff is empty or does not exist after download. Check curl command or permissions."
            exit 1
          fi
          echo "PR diff fetched successfully."

      - name: Send PR diff to Claude API
        id: claude_review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # The following lines are sensitive to YAML indentation.
          # Ensure they are consistently indented with spaces.
          DIFF_RAW=$(cat pr.diff)
          DIFF_TRUNCATED=$(echo "$DIFF_RAW" | head -c 12000) 

          if [ -z "$DIFF_TRUNCATED" ]; then
            echo "WARNING: Diff content is empty. Claude will likely receive an empty diff."
          fi

          # 构建发送给 Claude API 的 JSON payload
          # IMPORTANT: 请确保 'claude-3-7-sonnet-20250219' 是 Anthropic 官方支持且您的账户可用的模型名称。
          JSON_PAYLOAD=$(jq -n \
            --arg model "claude-3-7-sonnet-20250219" \
            --arg max_tokens_str "1024" \
            --arg temperature_str "0.2" \
            --arg system_message "You are an expert software engineer specializing in thorough and actionable code reviews for GitHub pull requests. Your goal is to provide concise, constructive, and highly relevant feedback, similar to a skilled human reviewer or an advanced AI assistant like GitHub Copilot's review feature. Focus on code quality, potential issues, best practices, and opportunities for improvement." \
            --arg diff_content "Here is a code diff from a GitHub pull request. Please perform a comprehensive code review focusing on the following aspects:

1.  **Correctness & Logic:** Identify any potential bugs, logical errors, or edge cases that might be overlooked.
2.  **Readability & Clarity:** Suggest improvements for code clarity, comments, and overall understanding.
3.  **Maintainability & Design:** Point out any areas that could be refactored for better long-term maintainability, scalability, or adherence to design principles.
4.  **Best Practices & Standards:** Check for adherence to common coding standards, design patterns, and idiomatic language usage.
5.  **Performance & Efficiency:** Highlight any potential performance bottlenecks or opportunities for optimization.
6.  **Security:** Identify any security vulnerabilities or unsafe practices.

Provide your feedback in a clear, concise, and actionable manner. If possible, offer concrete code suggestions or examples. Prioritize the most critical issues. Aim for a review that is helpful, educational, and easy to understand for the developer.

Code Diff:\n\n${DIFF_TRUNCATED}" \
            '{
              "model": $model,
              "max_tokens": ($max_tokens_str | tonumber),
              "temperature": ($temperature_str | tonumber),
              "system": $system_message,
              "messages": [
                {
                  "role": "user",
                  "content": $diff_content
                }
              ]
            }'
          )

          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "ERROR: ANTHROPIC_API_KEY is not set. Cannot call Claude API."
            exit 1
          fi

          RESPONSE_FULL=$(curl https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d "$JSON_PAYLOAD")
          
          echo "$RESPONSE_FULL" > review_response.json

          if echo "$RESPONSE_FULL" | jq -e '.error.type' > /dev/null; then
            echo "ERROR: Claude API returned an error:"
            echo "$RESPONSE_FULL" | jq '.error | .type + ": " + .message'
            exit 1
          fi

          if ! echo "$RESPONSE_FULL" | jq -e '.content[0].text' > /dev/null; then
              echo "ERROR: Claude API response did not contain expected content format. Response was:"
              echo "$RESPONSE_FULL"
              exit 1
          fi

          echo "Claude review completed."

      - name: Post comment to PR
        run: |
          if [ ! -s review_response.json ]; then
            echo "ERROR: review_response.json is empty or does not exist. Cannot post review."
            REVIEW="Claude review failed to generate a response. Please check workflow logs for details."
          else
            REVIEW=$(jq -r '.content[0].text' review_response.json)
            if [ -z "$REVIEW" ]; then
              echo "WARNING: Claude review response text is empty. Posting a placeholder."
              REVIEW="Claude review completed, but no specific feedback was generated. This might indicate an issue with the diff content or Claude's response. Please check workflow logs."
            fi
          fi

          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          
          COMMENT_PAYLOAD=$(jq -nc --arg body "$REVIEW" '{ body: $body }')
          
          echo "Attempting to post comment to PR #$PR_NUMBER..."
          echo "Comment payload (first 500 chars):"
          echo "$COMMENT_PAYLOAD" | head -c 500 || true
          echo ""

          RESPONSE_STATUS=$(curl -v -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$COMMENT_PAYLOAD" \
            https://api.github.com/repos/$REPO/issues/$PR_NUMBER/comments 2>&1)

          echo "GitHub API response for posting comment:"
          echo "$RESPONSE_STATUS"

          if echo "$RESPONSE_STATUS" | grep -q "HTTP/.* 20[0-2]"; then
            echo "PR comment posted successfully."
          else
            echo "ERROR: Failed to post PR comment. Check the GitHub API response above for details."
            exit 1
          fi
