name: Claude PR Review

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  pr-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read # 允许读取仓库内容，包括文件和PR diff
      pull-requests: write # 允许读取 PR 元数据，并允许在 PR 上发表评论
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3

      - name: Fetch PR diff
        id: get_diff
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }}

          echo "Fetching PR diff for PR #$PR_NUMBER in $REPO..."

          set -eo pipefail

          # 1. 获取 diff_url
          DIFF_URL_JSON=$(curl -sS -f -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER")
          
          DIFF_URL=$(echo "$DIFF_URL_JSON" | jq -r .diff_url)

          if [ -z "$DIFF_URL" ] || [ "$DIFF_URL" == "null" ]; then
            echo "ERROR: Failed to get diff_url or it was null. Review GitHub API response."
            exit 1
          fi

          # 2. 下载 diff 文件
          curl -L -f -H "Authorization: token $GH_TOKEN" "$DIFF_URL" > pr.diff

          # 3. 验证 pr.diff 文件内容
          if [ ! -s pr.diff ]; then
            echo "ERROR: pr.diff is empty or does not exist after download. Check curl command or permissions."
            exit 1
          fi
          echo "PR diff fetched successfully."

      - name: Send PR diff to Claude API
        id: claude_review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          DIFF_RAW=$(cat pr.diff)
          DIFF_TRUNCATED=$(echo "$DIFF_RAW" | head -c 12000) 

          echo "DEBUG: Content of DIFF_TRUNCATED variable (first 500 chars):"
          echo "$DIFF_TRUNCATED" | head -c 500 || true
          echo ""
          echo "DEBUG: Length of DIFF_TRUNCATED variable: ${#DIFF_TRUNCATED}"
          echo ""

          # 新增日志：打印完整的 DIFF_TRUNCATED 内容到临时文件并显示
          echo "DEBUG: Full content of DIFF_TRUNCATED being sent to Claude:"
          echo "$DIFF_TRUNCATED" > full_diff_to_claude.txt
          cat full_diff_to_claude.txt
          echo ""
          echo "DEBUG: End of full DIFF_TRUNCATED content."
          echo ""

          if [ -z "$DIFF_TRUNCATED" ]; then
            echo "WARNING: Diff content is empty. Claude will likely receive an empty diff."
          fi

          # 构建 Claude 的用户消息内容，确保 ${DIFF_TRUNCATED} 正确展开
          # 将整个提示词（不包含 DIFF_TRUNCATED 部分）作为单独的字符串参数
          # 这样可以避免 Shell 解析复杂的多行字符串中的特殊字符
          USER_PROMPT_STATIC_PART="这是一个 GitHub Pull Request 的代码差异。请对它进行全面审查，并以 **JSON 格式**提供详细、可操作的反馈。你的响应应包含以下顶级键：
            
            1.  \`summary\` (string): 本次 PR 的内容总结、目的和供其他评审人员关注的 1-2 个关键点。
            
            2.  \`low_confidence_issues\` (array of objects):
                * \`file\` (string): 相关的相对文件路径。
                * \`line\` (number, optional): 问题的起始行号（在修改后的文件中）。
                * \`description\` (string): 对问题的描述，解释你为什么怀疑它，指出潜在的风险或需要进一步人工确认的地方。
                * \`context_code\` (string, optional): 相关的代码片段，仅用 **Markdown 代码块**包裹 (例如 \`\`\`go\` 或 \`\`\`javascript\`)，不带 `suggestion`             标签，因为它不会被 GitHub 自动识别为可接受的建议。
            
            3.  \`high_confidence_fixes\` (array of objects):
                * \`file\` (string): 相关的相对文件路径。
                * \`line\` (number): 建议修改的起始行号。**此行号至关重要：它必须是你的建议所针对的代码在 PR **修改后文件**             中**实际被修改、添加或删除**的行的精确起始行号。**如果该行在 PR 差异中没有被标记为添加、删除或修改，GitHub 将无法在此处放置行内评论。**
                * \`description\` (string): 确认的问题的简洁描述。
                * \`suggested_code\` (string): 包含修复建议的 Markdown 代码块。**你必须严格使用 ```suggestion` 格式**，例如：
                    \`\`\`
                    ```suggestion
                    - // 这是原来的代码行，请务必包含在内
                    - // 这是如果修改涉及多行，原来的第二行
                    + // 这是建议修改后的新代码行，请务必包含在内
                    + // 这是如果修改涉及多行，建议添加的第二行
                    ```
                    \`\`\`
                    **特别注意：**
                    * 如果建议是删除一行，则只包含 `-` 开头的该行。
                    * 如果建议是添加一行，则只包含 `+` 开头的该行。
                    * 如果建议是修改一行，则包含 `-` 开头的原始行和 `+` 开头的修改后的行。
                    * 如果建议修改多行，请确保 `suggested_code` 包含所有受影响的行，用 `-` 和 `+` 明确标记。
                    * 请确保此代码块内容准确无误，代表了该行（或多行）的完整修改，可以直接在 GitHub UI 中点击“Accept suggestion”来应用。
            
            4.  \`other_suggestions\` (string, optional): 其他非关键但有益的通用改进建议。
            
            请务必严格遵守 JSON 结构和 `suggested_code` 的 Markdown 格式。请避免在 `suggested_code` 中包含额外的换行符，除非它是代码的一部分。
            
            代码差异：
            ```diff
            "

          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "ERROR: ANTHROPIC_API_KEY is not set. Cannot call Claude API."
            exit 1
          fi 

          # 构建完整的 JSON payload，并直接通过管道传递给 curl
          jq -n \
            --arg model "claude-3-7-sonnet-20250219" \
            --arg max_tokens_str "15000" \
            --arg temperature_str "0.2" \
            --arg system_message "你是一位专业的 AI 代码评审员，专注于为 GitHub Pull Request 提供类似 GitHub Copilot 的高质量、可操作的审查。你的反馈应清晰、结构化，并以 **JSON 格式**严格提供。**务必使用 GitHub `suggestion` Markdown 格式**来提供代码修复建议。你的目标是识别潜在的错误、改进、最佳实践违规、性能瓶颈和安全问题。请确保你的 JSON 结果是完整的且可解析的。" \
            --arg user_prompt_static "$USER_PROMPT_STATIC_PART" \
            --arg diff_content_val "$DIFF_TRUNCATED" \
            '{
              "model": $model,
              "max_tokens": ($max_tokens_str | tonumber),
              "temperature": ($temperature_str | tonumber),
              "system": $system_message,
              "messages": [
                {
                  "role": "user",
                  "content": ($user_prompt_static + $diff_content_val + "\n```") # Concatenate the static part, diff, and close the diff block
                }
              ]
            }' | curl -sS https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d @- > review_response.json # -d @- 表示从标准输入读取数据

          # 确保 review_response.json 已经生成，并且是有效的 JSON
          if ! [ -s review_response.json ] || ! jq -e '.' review_response.json > /dev/null; then
              echo "ERROR: Claude API response is not valid JSON or file is empty. Response was:"
              cat review_response.json || echo "File is empty or not found."
              exit 1
          fi

          # 检查 API 响应是否包含错误字段
          if jq -e '.error.type' review_response.json > /dev/null; then
            echo "ERROR: Claude API returned an error:"
            jq '.error | .type + ": " + .message' review_response.json
            exit 1
          fi

          echo "Claude review completed. Response saved to review_response.json."

      - name: Debug Claude API Response JSON
        run: |
          echo "Content of review_response.json:"
          cat review_response.json
          echo ""

      - name: Post Structured PR Comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const rawClaudeResponse = JSON.parse(fs.readFileSync('review_response.json', 'utf8'));
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            const headSha = context.payload.pull_request.head.sha;

            console.log(`Processing review data for PR #${prNumber}...`);

            // Helper function to escape characters that would break JavaScript template literals
            // This function escapes backslashes, backticks, and dollar signs.
            function escapeForTemplateLiteral(str) {
              if (typeof str !== 'string') return str; 
              return str.replace(/\\/g, '\\\\')    // Escape literal backslashes first
                         .replace(/`/g, '\\`')     // Then escape backticks
                         .replace(/\$/g, '\\$');   // Then escape dollar signs
            }

            let reviewData;
            try {
              // 提取并清理 Claude 响应中的 JSON 字符串
              let jsonString = rawClaudeResponse.content[0].text;
              // 移除 Markdown 代码块的开头和结尾
              jsonString = jsonString.replace(/^```json\n/, '').replace(/\n```$/, '');
              
              reviewData = JSON.parse(jsonString);
              console.log('Successfully parsed Claude review JSON.');
            } catch (error) {
              console.error('Failed to parse Claude review JSON from content[0].text:', error.message);
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: prNumber,
                body: `Claude review failed due to invalid JSON response. Please check workflow logs for details.\n\nRaw response:\n\`\`\`json\n${JSON.stringify(rawClaudeResponse, null, 2)}\n\`\`\``
              });
              process.exit(1);
            }

            let mainCommentBody = "";

            // 1. 本次 PR 概述与关注点
            if (reviewData.summary) {
              console.log('DEBUG: Review Summary (raw):', reviewData.summary); 
              mainCommentBody += `## 1. 本次 PR 概述与关注点：\n${escapeForTemplateLiteral(reviewData.summary)}\n\n`;
            }

            // 2. 存疑但无法确认的问题
            if (reviewData.low_confidence_issues && reviewData.low_confidence_issues.length > 0) {
              console.log('DEBUG: Low Confidence Issues (raw):', JSON.stringify(reviewData.low_confidence_issues, null, 2)); 
              mainCommentBody += `## 2. 存疑但无法确认的问题：\n\n`;
              reviewData.low_confidence_issues.forEach(issue => {
                console.log('DEBUG:   Issue file:', issue.file, 'line:', issue.line); 
                console.log('DEBUG:   Issue description (raw):', issue.description); 
                console.log('DEBUG:   Issue context_code (raw):', issue.context_code); 

                let issueLine = issue.file && issue.line ? ` (Line: ${issue.line} in \`${escapeForTemplateLiteral(issue.file)}\`)` : "";
                mainCommentBody += `- **${escapeForTemplateLiteral(issue.description)}**${issueLine}\n`;
                // context_code is expected to be a Markdown code block, so insert directly without additional escaping.
                // It's already correctly formatted by Claude within the JSON string.
                if (issue.context_code) {
                  // Ensure context_code is properly indented if it's a multi-line string
                  mainCommentBody += `  ${issue.context_code.replace(/\n/g, '\n  ')}\n`; // Add 2 spaces indent for context_code lines
                }
                mainCommentBody += "\n";
              });
              mainCommentBody += "---\n\n"; // 添加分隔线
            }

            // 4. 其他改进建议（如果有的话）
            if (reviewData.other_suggestions) {
              console.log('DEBUG: Other Suggestions (raw):', reviewData.other_suggestions); 
              mainCommentBody += `## 4. 其他改进建议：\n${escapeForTemplateLiteral(reviewData.other_suggestions)}\n\n`;
            }


            // 统一发布主要评论
            if (mainCommentBody.trim() !== "") {
              try {
                await github.rest.issues.createComment({
                  owner: repo.owner,
                  repo: repo.repo,
                  issue_number: prNumber,
                  body: mainCommentBody
                });
                console.log('Main PR summary and low-confidence issues posted successfully.');
              }
              catch (error) {
                console.error('Failed to post main PR comment:', error.message);
              }
            } else {
              console.log('No content for main PR comment (summary, low-confidence issues, other suggestions were empty).');
            }


            // 3. 确认的问题与修复建议 (Post as inline review comments with 'Accept suggestion' button)
            if (reviewData.high_confidence_fixes && reviewData.high_confidence_fixes.length > 0) {
              console.log('Posting high-confidence fixes as inline suggestions...');
              console.log('DEBUG: High Confidence Fixes (raw):', JSON.stringify(reviewData.high_confidence_fixes, null, 2)); 

              for (const fix of reviewData.high_confidence_fixes) {
                console.log('DEBUG: --- Processing individual high-confidence fix ---'); 
                console.log('DEBUG: Fix file:', fix.file); 
                console.log('DEBUG: Fix line:', fix.line); 
                console.log('DEBUG: Fix description (raw):', fix.description); 
                console.log('DEBUG: Fix suggested_code (raw):', fix.suggested_code); 

                if (!fix.file || !fix.line || !fix.suggested_code) {
                  console.warn(`Skipping invalid high-confidence fix: Missing file, line, or suggested_code. Fix details: ${JSON.stringify(fix)}`);
                  continue;
                }

                // Construct the comment body with the suggestion block
                // suggested_code is expected to be a Markdown suggestion block.
                // We only escape the description, as suggested_code already contains
                // its own Markdown formatting and internal escaping by Claude.
                const commentBody = `${escapeForTemplateLiteral(fix.description)}\n\n${fix.suggested_code}`;
                
                console.log('DEBUG: Generated commentBody (before API call):', commentBody); 

                try {
                  await github.rest.pulls.createReviewComment({
                    owner: repo.owner,
                    repo: repo.repo,
                    pull_number: prNumber,
                    commit_id: headSha,
                    path: fix.file,
                    line: fix.line, // This is the line in the NEW file where the suggestion applies
                    side: 'RIGHT', // Suggestion applies to the RIGHT (new) side of the diff
                    body: commentBody
                  });
                  console.log(`Posted inline suggestion for ${fix.file} at line ${fix.line}.`);
                } catch (error) {
                  console.error(`Failed to post inline suggestion for ${fix.file} at line ${fix.line}:`, error.message);
                  console.error('DEBUG: Comment body that caused error (for this fix):', commentBody); 
                  // FALLBACK: Post as a regular comment if inline fails
                  await github.rest.issues.createComment({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: prNumber,
                    body: `**无法在代码行上发布建议：**\n\n\`${fix.file}\` (Line: ${fix.line})\n\n${commentBody}\n\n_原因：通常是建议的行不在 PR 差异中被修改的行范围内，或者格式不完全符合 GitHub 要求。请手动审查。_`
                  });
                  console.log(`Posted fallback comment for ${fix.file} at line ${fix.line}.`);
                }
              }
            } else {
              console.log('No high-confidence fixes to post as inline suggestions.');
            }

            console.log('All comments processing completed.');
