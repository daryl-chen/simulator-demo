name: Claude PR Review

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  pr-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read # 允许读取仓库内容，包括文件和PR diff
      pull-requests: write # 修正：pull-requests 使用连字符而非下划线。允许读取 PR 元数据，并允许在 PR 上发表评论
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3

      - name: Fetch PR diff
        id: get_diff
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }}

          echo "Fetching PR diff for PR #$PR_NUMBER in $REPO..."

          set -eo pipefail

          # 1. 获取 diff_url
          DIFF_URL_JSON=$(curl -sS -f -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER")
          
          DIFF_URL=$(echo "$DIFF_URL_JSON" | jq -r .diff_url) # 修正这里：确保从 DIFF_URL_JSON 解析

          if [ -z "$DIFF_URL" ] || [ "$DIFF_URL" == "null" ]; then
            echo "ERROR: Failed to get diff_url or it was null. Review GitHub API response."
            exit 1
          fi

          # 2. 下载 diff 文件
          curl -L -f -H "Authorization: token $GH_TOKEN" "$DIFF_URL" > pr.diff

          # 3. 验证 pr.diff 文件内容
          if [ ! -s pr.diff ]; then
            echo "ERROR: pr.diff is empty or does not exist after download. Check curl command or permissions."
            exit 1
          fi
          echo "PR diff fetched successfully."

      - name: Send PR diff to Claude API
        id: claude_review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # The following lines are sensitive to YAML indentation.
          # Ensure they are consistently indented with spaces.
          DIFF_RAW=$(cat pr.diff)
          DIFF_TRUNCATED=$(echo "$DIFF_RAW" | head -c 12000) 

          if [ -z "$DIFF_TRUNCATED" ]; then
            echo "WARNING: Diff content is empty. Claude will likely receive an empty diff."
          fi

          # 构建发送给 Claude API 的 JSON payload
          # IMPORTANT: 请确保 'claude-3-7-sonnet-20250219' 是 Anthropic 官方支持且您的账户可用的模型名称。
          JSON_PAYLOAD=$(jq -n \
            --arg model "claude-3-7-sonnet-20250219" \
            --arg max_tokens_str "1024" \
            --arg temperature_str "0.2" \
            --arg system_message "你是一位专业的 AI 代码评审员，旨在提供详细、逐行且可操作的反馈，以模拟 GitHub Copilot 的 PR 审查功能。你的主要目标是识别潜在的改进、错误、最佳实践违规和优化机会。请以结构化、简洁且高度可操作的方式提供反馈，通常会附带具体的代码建议。" \
            --arg diff_content "这是一个 GitHub Pull Request 的代码差异。请进行一次全面的代码审查，重点关注以下方面：
              
              1.  **正确性与逻辑：** 识别任何潜在的 Bug、逻辑错误或可能被忽略的边缘情况。
              2.  **可读性与清晰度：** 提出代码清晰度、注释和整体理解方面的改进建议。
              3.  **可维护性与设计：** 指出任何可以重构以获得更好长期可维护性、可伸缩性或遵循设计原则的领域。
              4.  **最佳实践与标准：** 检查是否符合常见的编码标准、设计模式和惯用语言用法。
              5.  **性能与效率：** 突出任何潜在的性能瓶颈或优化机会。
              6.  **安全性：** 识别任何安全漏洞或不安全的实践。
              
              **评审格式说明（对实现类似 Copilot 输出至关重要）：**
              * **优先处理关键问题。**
              * **对于每项建议，尝试引用差异中的特定行**，通过引用相关行或指示行号。
              * **提供具体的代码示例**（如果适用），并使用 Markdown 代码块包裹。
              * **使用清晰的标题对你的反馈进行分类**（例如：`## Bug:`、`## 改进建议:`、`## 重构:`）。
              * **简洁明了。** 避免冗长的解释，清晰简短的建议即可。
              
              代码差异：\n\n${DIFF_TRUNCATED}" \
            '{
              "model": $model,
              "max_tokens": ($max_tokens_str | tonumber),
              "temperature": ($temperature_str | tonumber),
              "system": $system_message,
              "messages": [
                {
                  "role": "user",
                  "content": $diff_content
                }
              ]
            }'
          )

          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "ERROR: ANTHROPIC_API_KEY is not set. Cannot call Claude API."
            exit 1
          fi

          RESPONSE_FULL=$(curl https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d "$JSON_PAYLOAD")
          
          echo "$RESPONSE_FULL" > review_response.json

          if echo "$RESPONSE_FULL" | jq -e '.error.type' > /dev/null; then
            echo "ERROR: Claude API returned an error:"
            echo "$RESPONSE_FULL" | jq '.error | .type + ": " + .message'
            exit 1
          fi

          if ! echo "$RESPONSE_FULL" | jq -e '.content[0].text' > /dev/null; then
              echo "ERROR: Claude API response did not contain expected content format. Response was:"
              echo "$RESPONSE_FULL"
              exit 1
          fi

          echo "Claude review completed."

      - name: Post comment to PR
        run: |
          if [ ! -s review_response.json ]; then
            echo "ERROR: review_response.json is empty or does not exist. Cannot post review."
            REVIEW="Claude review failed to generate a response. Please check workflow logs for details."
          else
            REVIEW=$(jq -r '.content[0].text' review_response.json)
            if [ -z "$REVIEW" ]; then
              echo "WARNING: Claude review response text is empty. Posting a placeholder."
              REVIEW="Claude review completed, but no specific feedback was generated. This might indicate an issue with the diff content or Claude's response. Please check workflow logs."
            fi
          fi

          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          
          COMMENT_PAYLOAD=$(jq -nc --arg body "$REVIEW" '{ body: $body }')
          
          echo "Attempting to post comment to PR #$PR_NUMBER..."
          echo "Comment payload (first 500 chars):"
          echo "$COMMENT_PAYLOAD" | head -c 500 || true
          echo ""

          RESPONSE_STATUS=$(curl -v -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$COMMENT_PAYLOAD" \
            https://api.github.com/repos/$REPO/issues/$PR_NUMBER/comments 2>&1)

          echo "GitHub API response for posting comment:"
          echo "$RESPONSE_STATUS"

          if echo "$RESPONSE_STATUS" | grep -q "HTTP/.* 20[0-2]"; then
            echo "PR comment posted successfully."
          else
            echo "ERROR: Failed to post PR comment. Check the GitHub API response above for details."
            exit 1
          fi
